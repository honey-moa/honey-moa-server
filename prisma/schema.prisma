generator client {
  provider = "prisma-client-js"
}

// generator erd {
//   provider = "prisma-erd-generator"
//   theme    = "forest"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               BigInt        @id(map: "pk_users")
  nickname         String        @db.VarChar(20)
  email            String        @db.VarChar(255)
  password         String        @db.VarChar(255)
  loginType        LoginTypeEnum @map("login_type")
  role             UserRoleEnum  @default(USER)
  isEmailVerified  Boolean       @default(false) @map("is_email_verified") @db.Boolean
  profileImagePath String?       @map("profile_image_path") @db.VarChar(255)
  mbti             MbtiEnum?
  createdAt        DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime      @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt        DateTime?     @map("deleted_at") @db.Timestamptz(6)

  userVerifyTokens     UserVerifyToken[]
  requestedConnections UserConnection[]  @relation("RequestedConnection")
  requesterConnections UserConnection[]  @relation("RequesterConnection")
  chatMessages         ChatMessage[]
  blogPostComments     BlogPostComment[]

  @@unique([email, loginType], name: "uq_user_email_login_type")
  @@map("users")
}

model UserVerifyToken {
  id        BigInt                  @id(map: "pk_user_verify_tokens")
  userId    BigInt                  @map("user_id") @db.BigInt()
  type      UserVerifyTokenTypeEnum
  isUsed    Boolean                 @default(false) @map("is_used") @db.Boolean
  token     String                  @unique(map: "uq_user_verify_tokens_token") @db.Uuid
  createdAt DateTime                @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime                @default(now()) @map("updated_at") @db.Timestamptz(6)
  expiresAt DateTime                @map("expires_at") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type], name: "uq_user_verify_tokens_user_id_type")
  @@map("user_verify_tokens")
}

model UserConnection {
  id          BigInt                   @id(map: "pk_user_connections")
  // 피요청자
  requestedId BigInt                   @map("requested_id") @db.BigInt()
  // 요청자
  requesterId BigInt                   @map("requester_id") @db.BigInt()
  status      UserConnectionStatusEnum @default(PENDING)
  createdAt   DateTime                 @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime                 @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt   DateTime?                @map("deleted_at") @db.Timestamptz(6)

  requestedUser User @relation("RequestedConnection", fields: [requestedId], references: [id], onDelete: Cascade)
  requesterUser User @relation("RequesterConnection", fields: [requesterId], references: [id], onDelete: Cascade)

  blog     Blog?
  chatRoom ChatRoom?

  @@map("user_connections")
}

model Blog {
  id                  BigInt    @id(map: "pk_blogs")
  createdBy           BigInt    @map("created_by") @db.BigInt()
  connectionId        BigInt    @unique(map: "uq_blogs_connection_id") @map("connection_id") @db.BigInt()
  memberIds           BigInt[]  @map("member_ids") @db.BigInt()
  name                String    @db.VarChar(30)
  description         String    @db.VarChar(255)
  dDayStartDate       String    @map("d_day_start_date") @db.VarChar(20)
  backgroundImagePath String?   @map("background_image_path") @db.VarChar(255)
  createdAt           DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt           DateTime? @map("deleted_at") @db.Timestamptz(6)

  connection UserConnection @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  blogPosts  BlogPost[]

  @@map("blogs")
}

model ChatRoom {
  id           BigInt    @id(map: "pk_chat_rooms")
  createdBy    BigInt    @map("created_by") @db.BigInt()
  connectionId BigInt    @unique(map: "uq_chat_rooms_connection_id") @map("connection_id") @db.BigInt()
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt    DateTime? @map("deleted_at") @db.Timestamptz(6)

  connection UserConnection @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  messages   ChatMessage[]

  @@map("chat_rooms")
}

model ChatMessage {
  id          BigInt    @id(map: "pk_chat_messages")
  roomId      BigInt    @map("room_id") @db.BigInt()
  senderId    BigInt    @map("sender_id") @db.BigInt()
  message     String    @db.VarChar(1000)
  blogPostUrl String?   @map("blog_post_url") @db.VarChar(255)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz(6)

  chatRoom ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender   User     @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model Tag {
  id        BigInt   @id(map: "pk_tags")
  userId    BigInt   @map("user_id") @db.BigInt()
  name      String   @unique(map: "uq_tags_name") @db.VarChar(20)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  blogPostTags BlogPostTag[]

  @@map("tags")
}

// DESCRIPTION
// BlogPost에 대한 contents를 별도의 table로 빼지 않는 이유
// 1. 게시글 작성 시 클라이언트의 외부 의존성
// Client 측에서는 BlockNote라는 라이브러리를 이용하고 있음.
// 이 라이브러리는 블록 단위로 데이터를 저장하고 있음.
// 제대로 정형화 된 schema를 적용하기 위해서는 테이블을 따로 빼는 것이 좋음.
// 혹은 비정형 스키마에 최적화된 MongoDB를 사용하는 것도 고려해볼만한 방향.
// 2. 스케쥴 상 문제
// 하지만 현재 MVP 배포 스케쥴 상 MongoDB를 사용하기에는 무리가 있음.
// 3. 성능 고려
// 그렇다고 테이블을 따로 빼면 너무 깊은 depth의 JOIN을 해야 하는 문제가 있음.
// 4. 클라이언트에서 원하는 contents의 포맷이 바뀔 수도 있음
// 클라이언트 측에서 BlockNote가 아닌 다른 라이브러리를 사용하게 될 경우도 있을 것이고
// 그렇다고, BlockNote 라이브러리의 schema를 완벽하게 따라갈 수 있는 것도 아님.
// 따라서 현재는 역정규화하고 비정형 스키마를 사용하는 것으로 결정함.
// Validation 또한 Request Body에서만 하는 것으로 결정함.
model BlogPost {
  id        BigInt    @id(map: "pk_blog_posts")
  blogId    BigInt    @map("blog_id") @db.BigInt()
  userId    BigInt    @map("user_id") @db.BigInt()
  title     String    @db.VarChar(255)
  contents  Json
  date      String    @db.VarChar(20)
  location  String    @db.VarChar(100)
  isPublic  Boolean   @default(false) @map("is_public") @db.Boolean
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)

  blog                Blog                 @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogPostTags        BlogPostTag[]
  blogPostAttachments BlogPostAttachment[]
  blogPostComments    BlogPostComment[]

  @@map("blog_posts")
}

model BlogPostTag {
  id         BigInt   @id(map: "pk_blog_post_tags")
  blogPostId BigInt   @map("blog_post_id") @db.BigInt()
  tagId      BigInt   @map("tag_id") @db.BigInt()
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  blogPost BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  tag      Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([blogPostId, tagId], name: "uq_blog_post_tags_blog_post_id_tag_id")
  @@map("blog_post_tags")
}

model BlogPostAttachment {
  id           BigInt   @id(map: "pk_blog_post_attachments")
  blogPostId   BigInt   @map("blog_post_id") @db.BigInt()
  attachmentId BigInt   @map("attachment_id") @db.BigInt()
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  blogPost   BlogPost   @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  attachment Attachment @relation(fields: [attachmentId], references: [id], onDelete: Cascade)

  @@map("blog_post_attachments")
}

model BlogPostComment {
  id         BigInt    @id(map: "pk_blog_post_comments")
  blogPostId BigInt    @map("blog_post_id") @db.BigInt()
  userId     BigInt    @map("user_id") @db.BigInt()
  content    String    @db.VarChar(255)
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)
  deletedAt  DateTime? @map("deleted_at") @db.Timestamptz(6)

  blogPost BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("blog_post_comments")
}

model Attachment {
  id         BigInt                   @id(map: "pk_attachments")
  userId     BigInt                   @map("user_id") @db.BigInt()
  url        String                   @unique(map: "uq_attachments_url") @db.VarChar(255)
  path       String                   @unique(map: "uq_attachments_path") @db.VarChar(255)
  mimeType   String                   @map("mime_type") @db.VarChar(30)
  capacity   BigInt                   @db.BigInt()
  uploadType AttachmentUploadTypeEnum @map("upload_type")
  createdAt  DateTime                 @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime                 @default(now()) @map("updated_at") @db.Timestamptz(6)

  blogPostAttachments BlogPostAttachment[]

  @@map("attachments")
}

enum UserRoleEnum {
  USER
  ADMIN
}

enum LoginTypeEnum {
  EMAIL
}

enum MbtiEnum {
  ISTJ
  ISFJ
  INFJ
  INTJ
  ISTP
  ISFP
  INFP
  INTP
  ESTP
  ESFP
  ENFP
  ENTP
  ESTJ
  ESFJ
  ENFJ
  ENTJ
}

enum UserVerifyTokenTypeEnum {
  EMAIL
  PASSWORD_CHANGE
}

enum UserConnectionStatusEnum {
  PENDING
  ACCEPTED
  REJECTED
  DISCONNECTED
  CANCELED
}

enum AttachmentUploadTypeEnum {
  IMAGE
  FILE
}
